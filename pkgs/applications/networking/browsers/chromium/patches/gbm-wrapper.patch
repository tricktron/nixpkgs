diff --git a/ui/gfx/linux/gbm_wrapper.cc b/ui/gfx/linux/gbm_wrapper.cc
index 1b5d52cbb3..6fbf3cbd07 100644
--- a/ui/gfx/linux/gbm_wrapper.cc
+++ b/ui/gfx/linux/gbm_wrapper.cc
@@ -9,6 +9,7 @@
 
 #include "ui/gfx/linux/gbm_wrapper.h"
 
+#include <dlfcn.h>
 #include <gbm.h>
 #include <sys/mman.h>
 
@@ -29,7 +30,6 @@
 #include "ui/gfx/linux/scoped_gbm_device.h"
 
 #if !defined(MINIGBM)
-#include <dlfcn.h>
 #include <fcntl.h>
 #include <xf86drm.h>
 
@@ -56,16 +56,39 @@ int GetPlaneCount(struct gbm_bo* bo) {
   return gbm_bo_get_plane_count(bo);
 }
 
+using GetFdForPlaneFunc = int (*)(struct gbm_bo*, int);
+
+// Newer gbm versions provide fds per plane with the gbm_bo_get_fd_for_plane
+// function. Use it if available.
+GetFdForPlaneFunc GetFdForPlane() {
+  static GetFdForPlaneFunc fn = []() {
+    void* gbm_handle = dlopen("libgbm.so.1", RTLD_LAZY | RTLD_NOLOAD);
+    if (!gbm_handle) {
+      return static_cast<GetFdForPlaneFunc>(nullptr);
+    }
+
+    return reinterpret_cast<GetFdForPlaneFunc>(
+        dlsym(gbm_handle, "gbm_bo_get_fd_for_plane"));
+  }();
+  return fn;
+}
+
 base::ScopedFD GetPlaneFdForBo(gbm_bo* bo, size_t plane) {
 #if defined(MINIGBM)
   return base::ScopedFD(gbm_bo_get_plane_fd(bo, plane));
 #else
+  // If we have fds per plane support through the modern
+  // gbm_bo_get_fd_for_plane(), use it.
+  if (auto get_fd_for_plane = GetFdForPlane()) {
+    if (int fd = get_fd_for_plane(bo, static_cast<int>(plane)); fd >= 0) {
+      return base::ScopedFD(fd);
+    }
+  }
+  // Otherwise fall back to using drm ioctl to get a prime fd out of it avoid
+  // having two different branches for minigbm and Mesa gbm here.
   const int plane_count = GetPlaneCount(bo);
   DCHECK(plane_count > 0 && plane < static_cast<size_t>(plane_count));
 
-  // System linux gbm (or Mesa gbm) does not provide fds per plane basis. Thus,
-  // get plane handle and use drm ioctl to get a prime fd out of it avoid having
-  // two different branches for minigbm and Mesa gbm here.
   gbm_device* gbm_dev = gbm_bo_get_device(bo);
   int dev_fd = gbm_device_get_fd(gbm_dev);
   DCHECK_GE(dev_fd, 0);
@@ -152,12 +175,14 @@ class Buffer final : public ui::GbmBuffer {
     return ui::GetBufferFormatFromFourCCFormat(format_);
   }
   bool AreFdsValid() const override {
-    if (handle_.planes.empty())
+    if (handle_.planes.empty()) {
       return false;
+    }
 
     for (const auto& plane : handle_.planes) {
-      if (!plane.fd.is_valid())
+      if (!plane.fd.is_valid()) {
         return false;
+      }
     }
     return true;
   }
@@ -493,8 +518,9 @@ class Device final : public ui::GbmDevice {
 
 std::unique_ptr<GbmDevice> CreateGbmDevice(int fd) {
   gbm_device* device = gbm_create_device(fd);
-  if (!device)
+  if (!device) {
     return nullptr;
+  }
   return std::make_unique<gbm_wrapper::Device>(device);
 }
 
